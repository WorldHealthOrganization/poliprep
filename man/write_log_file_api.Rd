% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/get_polis.R
\name{write_log_file_api}
\alias{write_log_file_api}
\title{Write Update Log File}
\usage{
write_log_file_api(
  log_file_name,
  data_type,
  full_data,
  new_data,
  date_field,
  last_date_in_chunk,
  min_date,
  max_date,
  session_end_date
)
}
\arguments{
\item{log_file_name}{The name (and path) of the log file to be updated.}

\item{data_type}{The type of data being logged.}

\item{full_data}{A data frame representing the full dataset being processed.}

\item{new_data}{A data frame representing the new data being added.}

\item{date_field}{The name of the date field in the full_data and new_data
data frames.}

\item{last_date_in_chunk}{The last date in the current data chunk being
processed.}

\item{min_date}{The earliest date in the data being processed.}

\item{max_date}{The latest date in the data being processed.}

\item{session_end_date}{The end date of the current session.}
}
\description{
This function serves as a wrapper for updating a log file. It constructs a
log  message based on the provided parameters and appends it to an existing
log file or creates a new one if it doesn't exist. The function ensures that
date-timecolumns are correctly formatted and removes duplicate entries before
saving the file.
}
\details{
The function checks for the existence of the log file. If the file
exists, it appends the new log message. If not, it creates a new log
file. The function constructs the log message from the given
parameters, including data types and date ranges. It also handles
the conversion of specific columns to date format and ensures that
duplicate entries are removed.
}
\examples{
\dontrun{
new_log_message <- data.frame(...) # example log message
write_log_file_api(
  "api_log.csv", "myDataType", fullData, newData, "dateCol",
  "2023-01-01", "2023-01-01", "2023-01-10", "2023-01-10"
)
}
}
